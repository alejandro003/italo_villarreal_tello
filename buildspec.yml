version: 0.2
run-as: root

phases:
  install:
    commands:
      - echo Installing app dependencies...
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl   
      - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - echo 'export PATH=$PATH/$HOME/bin' >> ~/.bashrc
      - source ~/.bashrc
      - echo 'Check kubectl version'
      - kubectl version --short --client
      - npm install


  pre_build:
    commands:
      - echo Logging in to Amazon EKS...
      - aws eks --region us-east-1 update-kubeconfig --name demo
      - echo Checking config
      - kubectl config view --minify
      - echo Checking kubectl access
      - kubectl get svc
      - echo Logging in to Amazon ECR...
      - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/x1g7f4a5

  build:
    commands:
      - echo Build started on `date`
      - echo Pulling the official Node.js image...
      - docker pull node:14
      - echo Tagging the official Node.js image...
      - docker tag node:14 public.ecr.aws/x1g7f4a5/test-iavt12:nodejs-official
      - echo Pushing the official Node.js image...
      - docker push public.ecr.aws/x1g7f4a5/test-iavt12:nodejs-official
      - echo Building the customized Node.js image...
      - docker build -t nodejs-customized:latest .
      - docker tag nodejs-customized:latest public.ecr.aws/x1g7f4a5/test-iavt12:nodejs-cust

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the customized Node.js image...
      - docker push public.ecr.aws/x1g7f4a5/test-iavt12:nodejs-cust
      - echo Deploying the latest customized image to the cluster
      - kubectl apply -f deployment.yml
      - kubectl rollout restart deployment hello-world-deployment

artifacts:
  files:
    - app.js
    - package.json
    - package-lock.json
